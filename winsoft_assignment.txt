Q1: Merge two arrays by satisfying given constraints
Given two sorted arrays X[] and Y[] of size m and n each where m >= n and X[] has exactly n vacant cells,
 merge elements of Y[] in their correct position in array X[], i.e., merge (X, Y) by keeping the sorted order.

For example,

Input: X[] = { 0, 2, 0, 3, 0, 5, 6, 0, 0 }
Y[] = { 1, 8, 9, 10, 15 } The vacant cells in X[] is represented by 0 
Output: X[] = { 1, 2, 3, 5, 6, 8, 9, 10, 15 } 


import java.util.Scanner;

public class MergeArrays {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        
        System.out.print("Enter the size of array X: ");
        int m = scanner.nextInt();
        System.out.print("Enter the size of array Y: ");
        int n = scanner.nextInt();

        int[] X = new int[m];
        int[] Y = new int[n];

       
        System.out.println("Enter the elements of array X:");
        for (int i = 0; i < m; i++) {
            X[i] = scanner.nextInt();
        }


        System.out.println("Enter the elements of array Y:");
        for (int i = 0; i < n; i++) {
            Y[i] = scanner.nextInt();
        }

        mergeArrays(X, Y, m, n);

       
        System.out.println("Merged Array:");
        for (int num : X) {
            System.out.print(num + " ");
        }
    }

    
    public static void mergeArrays(int[] X, int[] Y, int m, int n) {
       
        int k = m - 1;
        for (int i = m - 1; i >= 0; i--) {
            if (X[i] != 0) {
                X[k] = X[i];
                k--;
            }
        }

      
        int i = k + 1; 
        int j = 0; 
        int l = 0; 
        while (i < m && j < n) {
            if (X[i] < Y[j]) {
                X[l] = X[i];
                i++;
            } else {
                X[l] = Y[j];
                j++;
            }
            l++;
        }

       
        while (j < n) {
            X[l] = Y[j];
            j++;
            l++;
        }
    }
}
  


Q2:Find maximum sum path involving elements of given arrays
Given two sorted arrays of integers, find a maximum sum path involving elements of both arrays whose sum is maximum. 
We can start from either array, but we can switch between arrays only through its common elements.

For example,

Input: X = { 3, 6, 7, 8, 10, 12, 15, 18, 100 }
Y = { 1, 2, 3, 5, 7, 9, 10, 11, 15, 16, 18, 25, 50 }  
The maximum sum path is: 1 —> 2 —> 3 —> 6 —> 7 —> 9 —> 10 —> 12 —> 15 —> 16 —> 18 —> 100 
The maximum sum is 199


import java.util.Scanner;

public class MaxSumPath {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

      
        System.out.print("Enter the size of array X: ");
        int m = scanner.nextInt();
        System.out.print("Enter the size of array Y: ");
        int n = scanner.nextInt();

        int[] X = new int[m];
        int[] Y = new int[n];

        
        System.out.println("Enter the elements of array X:");
        for (int i = 0; i < m; i++) {
            X[i] = scanner.nextInt();
        }

       
        System.out.println("Enter the elements of array Y:");
        for (int i = 0; i < n; i++) {
            Y[i] = scanner.nextInt();
        }

        int maxSum = maxSumPath(X, Y, m, n);
        System.out.println("The maximum sum path is: " + maxSum);
    }

    public static int maxSumPath(int[] X, int[] Y, int m, int n) {
        int maxSum = 0;
        int sumX = 0, sumY = 0;
        int i = 0, j = 0;

        while (i < m && j < n) {
            if (X[i] < Y[j]) {
                sumX += X[i++];
            } else if (X[i] > Y[j]) {
                sumY += Y[j++];
            } else { 
                maxSum += Math.max(sumX, sumY) + X[i];
                sumX = 0;
                sumY = 0;
                i++;
                j++;
            }
        }

       
        while (i < m) {
            sumX += X[i++];
        }

        
        while (j < n) {
            sumY += Y[j++];
        }

        
        maxSum += Math.max(sumX, sumY);
        return maxSum;
    }
}



Q3:Write a Java Program to count the number of words in a string using HashMap.




import java.util.HashMap;
import java.util.Map;

public class WordCount {
    public static void main(String[] args) {
        String str = "This is a sample string to count the number of words in this string.";
        Map<String, Integer> wordCountMap = countWords(str);
        System.out.println("Number of words in the string: " + wordCountMap.size());
        System.out.println("Word Count Map:");
        for (Map.Entry<String, Integer> entry : wordCountMap.entrySet()) {
            System.out.println(entry.getKey() + " : " + entry.getValue());
        }
    }

    public static Map<String, Integer> countWords(String str) {
        Map<String, Integer> wordCountMap = new HashMap<>();
        String[] words = str.split("\\s+"); 
        for (String word : words) {         
            word = word.replaceAll("^\\p{Punct}+|\\p{Punct}+$", "");        
            word = word.toLowerCase();        
            wordCountMap.put(word, wordCountMap.getOrDefault(word, 0) + 1);
        }
        return wordCountMap;
    }
}
 

Q4:Write a Java Program to find the duplicate characters in a string.

public class DuplicateCharacters {
    public static void main(String[] args) {
        String str = "programming";  
        str = str.toLowerCase();
        int[] charCount = new int[256];   
        for (int i = 0; i < str.length(); i++) {
            charCount[str.charAt(i)]++;
        }  
        System.out.println("Duplicate characters in the string '" + str + "':");
        for (int i = 0; i < charCount.length; i++) {
            if (charCount[i] > 1) {
                System.out.println((char) i + " - " + charCount[i] + " times");
            }
        }
    }
}

